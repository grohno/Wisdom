/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2021-07-01 13:39:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import dto.QuestionAnswersRelation;
import dto.AnswerUserRelation;
import dto.User;
import dao.CategoryDao;
import util.Constant;

public final class detail_005fque_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dto.AnswerUserRelation");
    _jspx_imports_classes.add("dao.CategoryDao");
    _jspx_imports_classes.add("dto.User");
    _jspx_imports_classes.add("util.Constant");
    _jspx_imports_classes.add("dto.QuestionAnswersRelation");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>質問詳細 | Wisdom - Q＆A Communication</title>\r\n");
      out.write("\t\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=2.0,user-scalable=yes\">\r\n");
      out.write("\t\t<meta charset=\"utf-8\">\r\n");
      out.write("\t\t<link href=\"./jsp/wisdom.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("\t\t<script src=\"https://code.jquery.com/jquery-2.2.4.js\"></script>\r\n");
      out.write("\t\t<script src=\"./jsp/js/script.js\"></script>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body id=\"detail\">\r\n");
      out.write("\t<div id=\"loading\"></div>\r\n");
      out.write("\t\t<header>\r\n");
      out.write("\t\t\t<div class=\"inner\">\r\n");
      out.write("\t\t\t\t<p class=\"img logo\"><a href=\"");
      out.print(Constant.PATH_WISDOM_CNTL);
      out.write("\"><img src=\"./jsp/images/wisdom_icon.png\" alt=\"Wisdom - Q＆A Communication\"></a></p>\r\n");
      out.write("\t\t\t\t<h1><a href=\"");
      out.print(Constant.PATH_WISDOM_CNTL);
      out.write("\">Wisdom - Q＆A Communication</a></h1>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</header>\r\n");
      out.write("\t\t<article>\r\n");
      out.write("\t\t\t<h1 class=\"balloon\">質問</h1>\r\n");
      out.write("\t\t\t");

			    QuestionAnswersRelation questionAnswersRelation = (QuestionAnswersRelation) request
			            .getAttribute("questionAnswersRelation");
			
      out.write("\r\n");
      out.write("\t\t\t");

			    User loginUser = (User) session.getAttribute(Constant.SCOPE_LOGIN_USER);
			
      out.write("\r\n");
      out.write("\t\t\t<p class=\"que qa_icon\">\r\n");
      out.write("\t\t\t\t");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getTitle());
      out.write("\r\n");
      out.write("\t\t\t\t");
 CategoryDao categoryDao = new CategoryDao(); 
      out.write("\r\n");
      out.write("\t\t\t\t<span class=\"cate cateId");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getCategoryId() );
      out.write('"');
      out.write('>');
      out.print(categoryDao.categoryName(questionAnswersRelation.getQuestionUserRelation().getQuestion().getCategoryId()) );
      out.write("</span>\r\n");
      out.write("\t\t\t\t<span class=\"byname\">by ");
      out.print(questionAnswersRelation.getQuestionUserRelation().getUser().getName());
      out.write("</span>\r\n");
      out.write("\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t\t<p>\r\n");
      out.write("\t\t\t\t");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getContent());
      out.write("\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t\t<h2 class=\"ans qa_icon\">回答</h2>\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t");

					int cnt = 1;
				    for (AnswerUserRelation answerUserRelation : questionAnswersRelation.getAnswerUserRelation()) {
				
      out.write("\r\n");
      out.write("\t\t\t\t<tr\r\n");
      out.write("\t\t\t\t");
 if (questionAnswersRelation.getQuestionUserRelation().getQuestion().getBestAnsId() != 0
					 && questionAnswersRelation.getQuestionUserRelation().getQuestion().getBestAnsId() == answerUserRelation.getAnswer().getId()) { 
      out.write("\r\n");
      out.write("\t\t\t\t class=\"bestAnsTr\"\r\n");
      out.write("\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\tA");
      out.print( cnt );
      out.write(".\r\n");
      out.write("\t\t\t\t\t\t");
 cnt++; 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
 if (questionAnswersRelation.getQuestionUserRelation().getQuestion().getBestAnsId() != 0
							 && questionAnswersRelation.getQuestionUserRelation().getQuestion().getBestAnsId() == answerUserRelation.getAnswer().getId()) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<span class=\"bestAnsMark\">ベストアンサー！</span>\r\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
 if (questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulAnsId() != 0 &&
							  questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulAnsId() == answerUserRelation.getAnswer().getId()) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<span class=\"helpfulAnsMark\">助かった！(");
      out.print(answerUserRelation.getAnswer().getHelpfulCount() );
      out.write(")</span>\r\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<span class=\"pre\">");
      out.print(answerUserRelation.getAnswer().getContent());
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t\t<span class=\"byname\">by ");
      out.print(answerUserRelation.getUser().getName());
      out.write("</span>\r\n");
      out.write("\t\t\t\t\t");
 if (loginUser != null) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
  boolean flag = true;
							if (questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulUser() != null && questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulUser().length() != 0) {
						    String[] strHelpfulUsers = questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulUser().split(",", 0);
							    for (String strHelpfulUser: strHelpfulUsers) {
							        int intHelpfulUser = Integer.parseInt(strHelpfulUser);
							        if (intHelpfulUser == loginUser.getId()) {
								        flag = false;
								        continue;
							       	}
							    }
							}
						
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
 if (answerUserRelation.getAnswer().getCreateUserId() != loginUser.getId() && flag) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<form action=\"");
      out.print(Constant.PATH_WISDOM_CNTL );
      out.write("\" method=\"post\" class=\"helpfulForm\" onSubmit=\"return helpfulCheck()\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_QUE_ID );
      out.write("\" value=\"");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getId());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_ANS_ID );
      out.write("\" value=\"");
      out.print(answerUserRelation.getAnswer().getId());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_ANS_HELPFUL_COUNT );
      out.write("\" value=\"");
      out.print(answerUserRelation.getAnswer().getHelpfulCount());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_ANS_HELPFUL_USER );
      out.write("\" value=\"");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getHelpfulUser());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_USER_ID );
      out.write("\" value=\"");
      out.print(loginUser.getId());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<button class=\"helpful\" type=\"submit\" name=\"");
      out.print(Constant.PARAM_ACTION);
      out.write("\" value=\"");
      out.print(Constant.ACTION_HELPFUL);
      out.write("\">助かった！と思ったらクリック</button>\r\n");
      out.write("\t\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t");
 if (questionAnswersRelation.getQuestionUserRelation().getQuestion().getBestAnsId() == 0 && questionAnswersRelation.getQuestionUserRelation().getQuestion().getCreateUserId() == loginUser.getId()) { 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t<form action=\"");
      out.print(Constant.PATH_WISDOM_CNTL );
      out.write("\" method=\"post\" class=\"bestAnsForm\" onSubmit=\"return bestAnsCheck()\">\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_QUE_ID );
      out.write("\" value=\"");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getId());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_ANS_ID );
      out.write("\" value=\"");
      out.print(answerUserRelation.getAnswer().getId());
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t<button type=\"submit\" name=\"");
      out.print(Constant.PARAM_ACTION);
      out.write("\" value=\"");
      out.print(Constant.ACTION_BEST_ANS);
      out.write("\">この回答をベストアンサーにする</button>\r\n");
      out.write("\t\t\t\t\t\t</form>\r\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

				    }
				
      out.write("\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t");
 if (loginUser != null) { 
      out.write("\r\n");
      out.write("\t\t\t");

			    if (loginUser.getId() != questionAnswersRelation.getQuestionUserRelation().getUser().getId()) {
			
      out.write("\r\n");
      out.write("\t\t\t<form action=\"");
      out.print(Constant.PATH_WISDOM_CNTL );
      out.write("\" method=\"post\">\r\n");
      out.write("\t\t\t\t<textarea name=\"");
      out.print(Constant.PARAM_ANS_CONTENT);
      out.write("\" required></textarea><br>\r\n");
      out.write("\t\t\t\t<input class=\"button\" type=\"submit\" value=\"回答する\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_ACTION);
      out.write("\" value=\"");
      out.print(Constant.ACTION_ANS_CREATE);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"");
      out.print(Constant.PARAM_QUE_ID );
      out.write("\" value=\"");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getId());
      out.write("\">\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t\t");

	     		} else if (loginUser.getId() == questionAnswersRelation.getQuestionUserRelation().getQuestion().getCreateUserId()) {
	 		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"WisdomController?action=editQue&que_id=");
      out.print(questionAnswersRelation.getQuestionUserRelation().getQuestion().getId());
      out.write("\" class=\"btn\">編集</a>\r\n");
      out.write("\t\t\t");

			    }
			
      out.write("\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t<a href=\"");
      out.print(Constant.PATH_WISDOM_CNTL);
      out.write("\" class=\"btn\">back</a>\r\n");
      out.write("\t\t</article>\r\n");
      out.write("\t\t<footer>\r\n");
      out.write("\t\t\t<p class=\"copyright\">\r\n");
      out.write("\t\t\t\t<small>\r\n");
      out.write("\t\t\t\t\tCopyright <script type=\"text/javascript\"> document.write(new Date().getFullYear()); </script> ZENET Co., Ltd. All Rights Reserved.\r\n");
      out.write("\t\t\t\t</small>\r\n");
      out.write("\t\t\t</p>\r\n");
      out.write("\t\t</footer>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
